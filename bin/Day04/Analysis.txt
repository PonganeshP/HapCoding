for(int i=N;i>0;i/=2){
    for(int j=0;j<i;j++){
            O(1)
    }
}
--------------------
N + N/2 + N/3 + N/4 +.... 1
-------> O(N^2)



int i = 0;
while(i*i <= N){
   for(int j = 0; j <= N; j++){
      for(int k = 0; k <= N; k++,i++){
         //O(1) operation
      }
   }
   i++;
}

------------------
inner loop runs N^2 when it reaches out While will terminated because of i++ in inner k loop
---------------> O(N^2)


for (int i = 3 ; i < n / 3  ;  i += 3) {
    for(int j = 2 ; j < n / 2 ; j += 2){
        // O(1) operation  
    }
}

------------------
in condn n/3 or n/2 should not consider the constants.
----------------> O(N^2)

public void solve(int N) {
    for(int i = 0; i < Math.pow(2,N); i++) {
        int j = i;
        while(j > 0){
            j -= 1;
        }
    }
}


--------------------
outer loop - 2^N
inner loop - i times that is 2^n
so (2^N)^2
-------------------> O(4^N)

